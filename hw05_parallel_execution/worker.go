package hw05parallelexecution

import (
	"fmt"
)

// worker –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏
type Worker struct {
	id             int
	WorkersChannel chan chan Task // –∫–æ–≥–¥–∞ –≤–æ—Ä–∫–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω - –æ–Ω –¥–æ–±–∞–≤–∏—Ç —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å—é–¥–∞
	WorkChannel    chan Task      // –∫–∞–Ω–∞–ª —Å –∑–∞–¥–∞—á–µ–π
	errorChannel   chan error     // –∫–∞–Ω–∞–ª —Å –æ—à–∏–±–∫–∞–º–∏
	end            chan bool      // –∫–∞–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
}

func (w *Worker) Start() {

	fmt.Printf("W-%v started...\n", w.id)
	go func() {
		for {
			w.WorkersChannel <- w.WorkChannel // –ø–æ–º–µ—â–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞—á–∏ –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
			select {
			case task, ok := <-w.WorkChannel:
				if !ok {
					w.Stop()
				}
				fmt.Printf("üõë W-%v working on task...\n", w.id) // –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–¥–∞—á—É
				err := task()
				w.errorChannel <- err
				fmt.Printf("‚úîÔ∏è W-%v task done\n", w.id)

			case <-w.end:
				return

			}

		}
	}()
}

func (w *Worker) Stop() {
	fmt.Printf("‚õî W-%v stopping\n", w.id)
	w.end <- true
}
